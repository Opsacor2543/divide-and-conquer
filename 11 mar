import tkinter as tk
from tkinter import messagebox
import random

# FUNCION QUE MUESTRA LA MATRIZ
def mostrar_matriz():
    # VARIABLES GLOBALES
    global matriz_frame

    # CREA UN FRAME PARA MOSTRAR LA MATRIZ
    if matriz_frame:
        matriz_frame.destroy()

    matriz_frame = tk.Frame(root)
    matriz_frame.pack(padx=10, pady=10)

    # ITERA LA MATRIZ Y SE ETIQUETA CADA ELEMENTO Y ASIGNA UN COLOR DE FONDO 
    for i in range(filas):
        for j in range(columnas):
            valor = M[i][j]
            color = 'white' if valor == 0 else 'black'

            # ASIGNA ETIQUETA
            tk.Label(matriz_frame, bg=color, width=2, height=1).grid(row=i, column=j)

# FUNCION DEL LABERINTO (BACK END)
def resuelve_laberinto():
    global M

    # Asegurarse de que la entrada y la salida estén abiertas
    M[0][0] = M[filas - 1][columnas - 1] = 0

    # Llamar a la función de búsqueda recursiva
    if buscar_camino((0, 0), (filas - 1, columnas - 1)):
        mostrar_matriz()  # Actualizar la matriz para mostrar el camino encontrado
    else:
        messagebox.showinfo("Información", "No se encontró un camino desde la entrada hasta la salida.")

def buscar_camino(actual, destino):
    global M

    # Desempaquetar las coordenadas actuales
    x, y = actual

    # Verificar si estamos fuera de los límites o en una pared
    if x < 0 or x >= filas or y < 0 or y >= columnas or M[x][y] != 0:
        return False

    # Marcar la celda actual como parte del camino
    M[x][y] = 2  # Usamos 2 para indicar que la celda es parte del camino

    # Si hemos llegado al destino, hemos encontrado el camino
    if actual == destino:
        return True

    # Llamar recursivamente a la búsqueda en las celdas adyacentes
    if buscar_camino((x + 1, y), destino) or buscar_camino((x, y + 1), destino) or \
            buscar_camino((x - 1, y), destino) or buscar_camino((x, y - 1), destino):
        return True

    # Si no encontramos un camino desde esta celda, desmarcarla
    M[x][y] = 0  # Usamos 0 para indicar que la celda no es parte del camino
    return False

# FUNCION QUE GENERA UN LABERINTO ALEATORIO
def generar_laberinto():
    # VARIABLES GLOBALES
    global M, filas, columnas

    try:
        filas = int(entry_filas.get())
        columnas = int(entry_columnas.get())

        # GENERAR UN LABERINTO ALEATORIO
        M = [[random.choice([0, 1]) for _ in range(columnas)] for _ in range(filas)]

        # Asegurarse de que el inicio y el final estén abiertos
        M[0][0] = M[filas - 1][columnas - 1] = 0

        mostrar_matriz()

    except ValueError:
        messagebox.showerror("Error", "Los datos no son válidos. Por favor, inténtelo de nuevo.")

# CREA LA VENTANA
root = tk.Tk()
root.title("Interfaz de Usuario")

# DECLARACIONES
matriz_frame = None
filas = 0
columnas = 0
M = []

# FRAME
frame = tk.Frame(root)
frame.pack(padx=80, pady=30)

# CAMPO COLUMNAS
tk.Label(frame, text="Filas:").grid(row=0, column=0)
entry_filas = tk.Entry(frame)
entry_filas.grid(row=0, column=1)

# CAMPO FILAS
tk.Label(frame, text="Columnas:").grid(row=1, column=0)
entry_columnas = tk.Entry(frame)
entry_columnas.grid(row=1, column=1)

btn_generar = tk.Button(frame, text="GENERAR", command=generar_laberinto)
btn_generar.grid(row=2, columnspan=2, pady=10)

btn_resolver = tk.Button(frame, text="RESOLVER", command=resuelve_laberinto)
btn_resolver.grid(row=3, columnspan=2, pady=10)

root.mainloop()
